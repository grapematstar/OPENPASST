name: (( config_from_cf.cf_deployment_name "-diego" ))

releases: (( base_releases bbs_overrides.releases volman_overrides.releases cf_networking_overrides.releases [garden_overrides.release] [config_from_cf.cf_release] bridge_overrides.releases  ))

director_uuid: (( config_from_cf.cf_director_uuid ))

compilation:
  workers: (( iaas_settings.compilation_workers || 6 ))
  network: diego1
  reuse_compilation_vms: true
  cloud_properties: (( iaas_settings.compilation_cloud_properties ))

update:
  canaries: 1
  canary_watch_time: 5000-120000
  update_watch_time: 5000-120000
  max_in_flight: 1
  serial: false

networks:
  - name: diego1
    type: manual
    subnets: (( iaas_settings.subnet_configs.diego1.subnets ))
  - name: diego2
    type: manual
    subnets: (( iaas_settings.subnet_configs.diego2.subnets || [] ))
  - name: diego3
    type: manual
    subnets: (( iaas_settings.subnet_configs.diego3.subnets || [] ))

disk_pools:
  - name: database_disks
    disk_size: (( iaas_settings.disk_pools.database_disks.disk_size || 2048 ))
    cloud_properties: (( iaas_settings.disk_pools.database_disks.cloud_properties || empty_hash ))

resource_pools:
  - name: access_z1
    network: diego1
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.access_z1.cloud_properties ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: access_z2
    network: diego2
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.access_z2.cloud_properties || empty_hash ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: access_z3
    network: diego3
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.access_z3.cloud_properties || empty_hash ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: brain_z1
    network: diego1
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.brain_z1.cloud_properties ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: brain_z2
    network: diego2
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.brain_z2.cloud_properties || empty_hash ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: brain_z3
    network: diego3
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.brain_z3.cloud_properties || empty_hash ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: cc_bridge_z1
    network: diego1
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.cc_bridge_z1.cloud_properties ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: cc_bridge_z2
    network: diego2
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.cc_bridge_z2.cloud_properties || empty_hash ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: cc_bridge_z3
    network: diego3
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.cc_bridge_z3.cloud_properties || empty_hash ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: cell_z1
    network: diego1
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.cell_z1.cloud_properties ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: cell_z2
    network: diego2
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.cell_z2.cloud_properties || empty_hash ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: cell_z3
    network: diego3
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.cell_z3.cloud_properties || empty_hash ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: database_z1
    network: diego1
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.database_z1.cloud_properties ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: database_z2
    network: diego2
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.database_z2.cloud_properties || empty_hash ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: database_z3
    network: diego3
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.database_z3.cloud_properties || empty_hash ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: route_emitter_z1
    network: diego1
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.route_emitter_z1.cloud_properties ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: route_emitter_z2
    network: diego2
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.route_emitter_z2.cloud_properties || empty_hash ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: route_emitter_z3
    network: diego3
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.route_emitter_z3.cloud_properties || empty_hash ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: colocated_z1
    network: diego1
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.colocated_z1.cloud_properties ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: colocated_z2
    network: diego2
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.colocated_z2.cloud_properties || empty_hash ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))
  - name: colocated_z3
    network: diego3
    stemcell: (( iaas_settings.stemcell ))
    cloud_properties: (( iaas_settings.resource_pool_cloud_properties.colocated_z3.cloud_properties || empty_hash ))
    env: (( merge || resource_pool_overrides.base_stemcell_env ))

jobs: (( cf_networking_overrides.jobs base.jobs ))

base:
  jobs:
    - name: database_z1
      templates: (( bbs_overrides.job_templates ))
      instances: (( instance_count_overrides.database_z1.instances || 1 ))
      persistent_disk_pool: database_disks
      resource_pool: database_z1
      networks:
        - name: diego1
          static_ips: (( static_ips(1, 2, 3) ))
      update:
        serial: true
        max_in_flight: 1
      properties:
        consul: (( bbs_overrides.job_properties.consul ))
        dropsonde_port: (( config_from_cf.metron_agent.dropsonde_incoming_port ))
        metron_agent:
          zone: z1
        tls:
          ca_cert: (( property_overrides.locket.tls.ca_cert || nil))
          cert:    (( property_overrides.locket.tls.cert || nil ))
          key:     (( property_overrides.locket.tls.key || nil ))
        database:
          max_open_connections: (( property_overrides.locket.database.max_open_connections || nil ))
        loggregator: &database-loggregator
          use_v2_api:  (( property_overrides.loggregator.use_v2_api || nil ))
          v2_api_port: (( config_from_cf.metron_agent.grpc_port || nil ))
          ca_cert:     (( property_overrides.loggregator.tls.ca_cert || config_from_cf.loggregator.tls.ca_cert ))
          cert:        (( property_overrides.loggregator.tls.cert || config_from_cf.loggregator.metron.cert ))
          key:         (( property_overrides.loggregator.tls.key || config_from_cf.loggregator.metron.key ))

    - name: database_z2
      templates: (( bbs_overrides.job_templates ))
      instances: (( instance_count_overrides.database_z2.instances || 1 ))
      persistent_disk_pool: database_disks
      resource_pool: database_z2
      networks:
        - name: diego2
          static_ips: (( static_ips(1, 2, 3) ))
      update:
        serial: true
        max_in_flight: 1
      properties:
        consul: (( bbs_overrides.job_properties.consul ))
        dropsonde_port: (( config_from_cf.metron_agent.dropsonde_incoming_port ))
        metron_agent:
          zone: z2
        tls:
          ca_cert: (( property_overrides.locket.tls.ca_cert || nil))
          cert:    (( property_overrides.locket.tls.cert || nil ))
          key:     (( property_overrides.locket.tls.key || nil ))
        database:
          max_open_connections: (( property_overrides.locket.database.max_open_connections || nil ))
        loggregator: *database-loggregator
  
    - name: database_z3
      templates: (( bbs_overrides.job_templates ))
      instances: (( instance_count_overrides.database_z3.instances || 1 ))
      persistent_disk_pool: database_disks
      resource_pool: database_z3
      networks:
        - name: diego3
          static_ips: (( static_ips(1, 2, 3) ))
      update:
        serial: true
        max_in_flight: 1
      properties:
        consul: (( bbs_overrides.job_properties.consul ))
        dropsonde_port: (( config_from_cf.metron_agent.dropsonde_incoming_port ))
        metron_agent:
          zone: z3
        tls:
          ca_cert: (( property_overrides.locket.tls.ca_cert || nil))
          cert:    (( property_overrides.locket.tls.cert || nil ))
          key:     (( property_overrides.locket.tls.key || nil ))
        database:
          max_open_connections: (( property_overrides.locket.database.max_open_connections || nil ))
        loggregator: *database-loggregator
        
    - name: brain_z1
      templates: (( base_job_templates.brain ))
      instances: (( instance_count_overrides.brain_z1.instances || 1 ))
      resource_pool: brain_z1
      networks:
        - name: diego1
          static_ips: (( static_ips(4, 5, 6) ))
      update:
        serial: true
        max_in_flight: 1
      properties:
        metron_agent:
          zone: z1
        loggregator: &brain-loggregator
          use_v2_api:  (( property_overrides.loggregator.use_v2_api || nil ))
          v2_api_port: (( config_from_cf.metron_agent.grpc_port || nil ))
          ca_cert:     (( property_overrides.loggregator.tls.ca_cert || config_from_cf.loggregator.tls.ca_cert ))
          cert:        (( property_overrides.loggregator.tls.cert || config_from_cf.loggregator.cert ))
          key:         (( property_overrides.loggregator.tls.key || config_from_cf.loggregator.key ))

    - name: cell_z1
      templates: (( base_job_templates.cell volman_overrides.driver_templates cf_networking_overrides.driver_templates route_emitter_overrides.templates  paasta_overrides.templates ))
      instances: (( instance_count_overrides.cell_z1.instances || 1 ))
      resource_pool: cell_z1
      networks:
        - name: diego1
          static_ips: (( static_ips(7, 8, 9) ))
      update:
        serial: false
        max_in_flight: (( instance_count_overrides.cell_z1.max_in_flight || 1 ))
      properties:
        # Properties below are currently used for download/upload actions but
        # should eventually replace all other client/server certs for the rep.
        # for now we will use the bbs client certs if the user doesn't specify
        # the certs
        tls: &cell-tls-configuration
          cert: (( property_overrides.cell.tls.cert || property_overrides.rep.server_cert || nil ))
          key: (( property_overrides.cell.tls.key || property_overrides.rep.server_key || nil ))
          ca_cert: (( property_overrides.cell.tls.ca_cert || property_overrides.rep.ca_cert || nil ))
        loggregator: &cell-loggregator
          use_v2_api:  (( property_overrides.loggregator.use_v2_api || nil ))
          v2_api_port: (( config_from_cf.metron_agent.grpc_port || nil ))
          ca_cert:     (( property_overrides.loggregator.tls.ca_cert || config_from_cf.loggregator.tls.ca_cert ))
          cert:        (( property_overrides.loggregator.tls.cert || config_from_cf.loggregator.metron.cert ))
          key:         (( property_overrides.loggregator.tls.key || config_from_cf.loggregator.metron.key ))
        metron_agent:
          zone: z1
        diego:
          rep:
            use_azure_fault_domains: (( property_overrides.cell_z1.use_azure_fault_domains || nil ))
            zone: (( property_overrides.cell_z1.zone || "z1" ))
            placement_tags: (( property_overrides.rep.placement_tags || [] ))
          route_emitter:
            local_mode: (( route_emitter_overrides.local_mode_enabled ))
        enable_declarative_healthcheck: (( property_overrides.rep.enable_declarative_healthcheck || nil ))
        tcp:
          enabled: (( property_overrides.tcp_emitter.enabled || nil ))
        routing_api:
          url: (( property_overrides.tcp_emitter.routing_api_url || nil ))
          port:  (( property_overrides.tcp_emitter.routing_api_port || nil ))
        uaa: &route_emitter_uaa_configuration
          skip_cert_verify: (( property_overrides.tcp_emitter.uaa_skip_cert_verify || nil ))
          hostname: (( property_overrides.tcp_emitter.uaa_hostname || nil ))
          port: (( config_from_cf.uaa.tls_port ))
          ca_cert: (( config_from_cf.uaa.ca_cert ))
          client_secret: (( config_from_cf.uaa.tcp_emitter_client_secret ))
          client_name: (( property_overrides.tcp_emitter.uaa_client_name || nil ))

    - name: cc_bridge_z1
      templates: (( base_job_templates.cc_bridge ))
      instances: (( instance_count_overrides.cc_bridge_z1.instances || 1 ))
      resource_pool: cc_bridge_z1
      networks:
        - name: diego1
          static_ips: (( static_ips(10, 11, 12) ))
      update:
        serial: false
        max_in_flight: (( instance_count_overrides.cc_bridge_z1.max_in_flight || 1 ))
      properties:
        metron_agent:
          zone: z1

    - name: route_emitter_z1
      templates: (( base_job_templates.route_emitter ))
      instances: (( instance_count_overrides.route_emitter_z1.instances || 1 ))
      resource_pool: route_emitter_z1
      networks:
        - name: diego1
          static_ips: (( static_ips(13) ))
      update:
        serial: false
        max_in_flight: (( instance_count_overrides.route_emitter_z1.max_in_flight || 1 ))
      properties:
        loggregator: &route_emitter-loggregator
          use_v2_api:  (( property_overrides.loggregator.use_v2_api || nil ))
          v2_api_port: (( config_from_cf.metron_agent.grpc_port || nil ))
          ca_cert:     (( property_overrides.loggregator.tls.ca_cert || config_from_cf.loggregator.tls.ca_cert ))
          cert:        (( property_overrides.loggregator.tls.cert || config_from_cf.loggregator.metron.cert ))
          key:         (( property_overrides.loggregator.tls.key || config_from_cf.loggregator.metron.key ))
        metron_agent:
          zone: z1
        tcp:
          enabled: (( property_overrides.tcp_emitter.enabled || nil ))
        routing_api:
          url: (( property_overrides.tcp_emitter.routing_api_url || nil ))
          port:  (( property_overrides.tcp_emitter.routing_api_port || nil ))
        uaa: *route_emitter_uaa_configuration

    - name: access_z1
      templates: (( base_job_templates.access ))
      instances: (( instance_count_overrides.access_z1.instances || 1 ))
      resource_pool: access_z1
      networks:
        - name: diego1
          static_ips: (( static_ips(16, 17, 18) ))
      update:
        serial: false
        max_in_flight: (( instance_count_overrides.access_z1.max_in_flight || 1 ))
      properties:
        loggregator: &access-loggregator
          use_v2_api:  (( property_overrides.loggregator.use_v2_api || nil ))
          v2_api_port: (( config_from_cf.metron_agent.grpc_port || nil ))
          ca_cert:     (( property_overrides.loggregator.tls.ca_cert || config_from_cf.loggregator.tls.ca_cert ))
          cert:        (( property_overrides.loggregator.tls.cert || config_from_cf.loggregator.metron.cert ))
          key:         (( property_overrides.loggregator.tls.key || config_from_cf.loggregator.metron.key ))
        metron_agent:
          zone: z1

    - name: brain_z2
      templates: (( base_job_templates.brain ))
      instances: (( instance_count_overrides.brain_z2.instances || 1 ))
      resource_pool: brain_z2
      networks:
        - name: diego2
          static_ips: (( static_ips(4, 5, 6) ))
      update:
        serial: true
        max_in_flight: 1
      properties:
        metron_agent:
          zone: z2
        loggregator: *brain-loggregator

    - name: cell_z2
      templates: (( base_job_templates.cell volman_overrides.driver_templates cf_networking_overrides.driver_templates route_emitter_overrides.templates  paasta_overrides.templates ))
      instances: (( instance_count_overrides.cell_z2.instances || 0 ))
      resource_pool: cell_z2
      networks:
        - name: diego2
          static_ips: (( static_ips(7, 8, 9) ))
      update:
        serial: false
        max_in_flight: (( instance_count_overrides.cell_z2.max_in_flight || 1 ))
      properties:
        loggregator: *cell-loggregator
        tls: *cell-tls-configuration
        metron_agent:
          zone: z2
        diego:
          rep:
            use_azure_fault_domains: (( property_overrides.cell_z2.use_azure_fault_domains || nil ))
            zone: (( property_overrides.cell_z2.zone || "z2" ))
            placement_tags: (( property_overrides.rep.placement_tags || [] ))
          route_emitter:
            local_mode: (( route_emitter_overrides.local_mode_enabled ))
        enable_declarative_healthcheck: (( property_overrides.rep.enable_declarative_healthcheck || nil ))
        tcp:
          enabled: (( property_overrides.tcp_emitter.enabled || nil ))
        routing_api:
          url: (( property_overrides.tcp_emitter.routing_api_url || nil ))
          port:  (( property_overrides.tcp_emitter.routing_api_port || nil ))
        uaa: *route_emitter_uaa_configuration

    - name: cc_bridge_z2
      templates: (( base_job_templates.cc_bridge ))
      instances: (( instance_count_overrides.cc_bridge_z2.instances || 1 ))
      resource_pool: cc_bridge_z2
      networks:
        - name: diego2
          static_ips: (( static_ips(10, 11, 12) ))
      update:
        serial: false
        max_in_flight: (( instance_count_overrides.cc_bridge_z2.max_in_flight || 1 ))
      properties:
        metron_agent:
          zone: z2

    - name: route_emitter_z2
      templates: (( base_job_templates.route_emitter ))
      instances: (( instance_count_overrides.route_emitter_z2.instances || 1 ))
      resource_pool: route_emitter_z2
      networks:
        - name: diego2
          static_ips: (( static_ips(13) ))
      update:
        serial: false
        max_in_flight: (( instance_count_overrides.route_emitter_z2.max_in_flight || 1 ))
      properties:
        loggregator: *route_emitter-loggregator
        metron_agent:
          zone: z2
        tcp:
          enabled: (( property_overrides.tcp_emitter.enabled || nil ))
        routing_api:
          url: (( property_overrides.tcp_emitter.routing_api_url || nil ))
          port:  (( property_overrides.tcp_emitter.routing_api_port || nil ))
        uaa: *route_emitter_uaa_configuration

    - name: access_z2
      templates: (( base_job_templates.access ))
      instances: (( instance_count_overrides.access_z2.instances || 1 ))
      resource_pool: access_z2
      networks:
        - name: diego2
          static_ips: (( static_ips(16, 17, 18) ))
      update:
        serial: false
        max_in_flight: (( instance_count_overrides.access_z2.max_in_flight || 1))
      properties:
        loggregator: *access-loggregator
        metron_agent:
          zone: z2

    - name: brain_z3
      templates: (( base_job_templates.brain))
      instances: (( instance_count_overrides.brain_z3.instances || 0 ))
      resource_pool: brain_z3
      networks:
        - name: diego3
          static_ips: (( static_ips(4, 5, 6) ))
      update:
        serial: true
        max_in_flight: 1
      properties:
        metron_agent:
          zone: z3
        loggregator: *brain-loggregator

    - name: cell_z3
      templates: (( base_job_templates.cell volman_overrides.driver_templates cf_networking_overrides.driver_templates route_emitter_overrides.templates  paasta_overrides.templates ))
      instances: (( instance_count_overrides.cell_z3.instances || 0 ))
      resource_pool: cell_z3
      networks:
        - name: diego3
          static_ips: (( static_ips(7, 8, 9) ))
      update:
        serial: false
        max_in_flight: (( instance_count_overrides.cell_z3.max_in_flight || 1 ))
      properties:
        tls: *cell-tls-configuration
        loggregator: *cell-loggregator
        metron_agent:
          zone: z3
        diego:
          rep:
            use_azure_fault_domains: (( property_overrides.cell_z3.use_azure_fault_domains || nil ))
            zone: (( property_overrides.cell_z3.zone || "z3" ))
            placement_tags: (( property_overrides.rep.placement_tags || [] ))
          route_emitter:
            local_mode: (( route_emitter_overrides.local_mode_enabled ))
        enable_declarative_healthcheck: (( property_overrides.rep.enable_declarative_healthcheck || nil ))
        tcp:
          enabled: (( property_overrides.tcp_emitter.enabled || nil ))
        routing_api:
          url: (( property_overrides.tcp_emitter.routing_api_url || nil ))
          port:  (( property_overrides.tcp_emitter.routing_api_port || nil ))
        uaa: *route_emitter_uaa_configuration

    - name: cc_bridge_z3
      templates: (( base_job_templates.cc_bridge ))
      instances: (( instance_count_overrides.cc_bridge_z3.instances || 0 ))
      resource_pool: cc_bridge_z3
      networks:
        - name: diego3
          static_ips: (( static_ips(10, 11, 12) ))
      update:
        serial: false
        max_in_flight: (( instance_count_overrides.cc_bridge_z3.max_in_flight || 1 ))
      properties:
        metron_agent:
          zone: z3

    - name: route_emitter_z3
      templates: (( base_job_templates.route_emitter ))
      instances: (( instance_count_overrides.route_emitter_z3.instances || 0 ))
      resource_pool: route_emitter_z3
      networks:
        - name: diego3
          static_ips: (( static_ips(13) ))
      update:
        serial: false
        max_in_flight: (( instance_count_overrides.route_emitter_z3.max_in_flight || 1 ))
      properties:
        loggregator: *route_emitter-loggregator
        metron_agent:
          zone: z3
        tcp:
          enabled: (( property_overrides.tcp_emitter.enabled || nil ))
        routing_api:
          url: (( property_overrides.tcp_emitter.routing_api_url || nil ))
          port:  (( property_overrides.tcp_emitter.routing_api_port || nil ))
        uaa: *route_emitter_uaa_configuration

    - name: access_z3
      templates: (( base_job_templates.access ))
      instances: (( instance_count_overrides.access_z3.instances || 0 ))
      resource_pool: access_z3
      networks:
        - name: diego3
          static_ips: (( static_ips(16, 17, 18) ))
      update:
        serial: false
        max_in_flight: (( instance_count_overrides.access_z3.max_in_flight || 1))
      properties:
        loggregator: *access-loggregator
        metron_agent:
          zone: z3

    - name: colocated_z1
      templates: (( base_job_templates.colocated bbs_overrides.job_templates ))
      instances: (( instance_count_overrides.colocated_z1.instances || 0 ))
      persistent_disk_pool: database_disks
      resource_pool: colocated_z1
      networks:
        - name: diego1
          static_ips: (( static_ips(7) ))
      update:
        serial: true
        max_in_flight: 1
      properties:
        consul: (( base_bbs_consul_properties ))
        diego:
          rep:
            zone: z1
        metron_agent:
          zone: z1

    - name: colocated_z2
      templates: (( base_job_templates.colocated bbs_overrides.job_templates ))
      instances: (( instance_count_overrides.colocated_z2.instances || 0 ))
      persistent_disk_pool: database_disks
      resource_pool: colocated_z2
      networks:
        - name: diego2
          static_ips: (( static_ips(7) ))
      update:
        serial: true
        max_in_flight: 1
      properties:
        consul: (( base_bbs_consul_properties ))
        diego:
          rep:
            zone: z2
        metron_agent:
          zone: z2

    - name: colocated_z3
      templates: (( base_job_templates.colocated bbs_overrides.job_templates ))
      instances: (( instance_count_overrides.colocated_z3.instances || 0 ))
      persistent_disk_pool: database_disks
      resource_pool: colocated_z3
      networks:
        - name: diego3
          static_ips: (( static_ips(7) ))
      update:
        serial: true
        max_in_flight: 1
      properties:
        consul: (( base_bbs_consul_properties ))
        diego:
          rep:
            zone: z3
        metron_agent:
          zone: z3

properties:
  # -- Properties below are used by the metron_agent job from cf-release --
  metron_agent:
    deployment: (( name ))
    dropsonde_incoming_port: (( config_from_cf.metron_agent.dropsonde_incoming_port ))
  loggregator:
    etcd:
      require_ssl: (( config_from_cf.loggregator.etcd_require_ssl ))
      ca_cert: (( config_from_cf.loggregator.etcd_ca_cert ))
      machines: (( config_from_cf.loggregator.etcd_machines ))
    tls:
      ca_cert: (( config_from_cf.loggregator.tls.ca_cert ))
      metron:
        cert: (( config_from_cf.loggregator.tls.metron.cert ))
        key: (( config_from_cf.loggregator.tls.metron.key ))
  metron_endpoint:
    shared_secret: (( config_from_cf.metron_endpoint.shared_secret ))
  syslog_daemon_config: (( config_from_cf.syslog_daemon_config ))

  # -- Properties below are used by the consul_agent job from cf-release --
  consul:
    agent:
      datacenter: (( config_from_cf.consul.datacenter ))
      domain: (( config_from_cf.consul.domain ))
      log_level: (( config_from_cf.consul.log_level ))
      servers:
        lan: (( config_from_cf.consul.lan_servers ))
    ca_cert: (( config_from_cf.consul.ca_cert ))
    agent_cert: (( config_from_cf.consul.agent_cert ))
    agent_key: (( config_from_cf.consul.agent_key ))
    encrypt_keys: (( config_from_cf.consul.encrypt_keys ))
    server_cert: (( config_from_cf.consul.server_cert ))
    server_key: (( config_from_cf.consul.server_key ))

  # -- Properties below are used by the etcd from etcd-release --
  etcd: (( bbs_overrides.etcd_properties ))

  cflinuxfs2-rootfs:
    trusted_certs: (( property_overrides.rootfs_cflinuxfs2.trusted_certs || nil ))

  # -- Properties used by cf-networking processes on the cell and the policy-server job --
  cf_networking: (( cf_networking_overrides.properties.cf_networking || nil ))

  # -- Properties below are used by the jobs from diego-release --
  diego:
    # -- Global property --
    ssl:
      skip_cert_verify: (( property_overrides.skip_cert_verify || nil ))

    # -- Job-specific properties --
    auctioneer:
      ca_cert: (( property_overrides.bbs.auctioneer.ca_cert || nil ))
      server_cert: (( property_overrides.bbs.auctioneer.server_cert || nil ))
      server_key: (( property_overrides.bbs.auctioneer.server_key || nil ))
      bbs:
        api_location: (( property_overrides.bbs.api_location || "bbs.service.cf.internal:8889" ))
        ca_cert: (( property_overrides.bbs.ca_cert ))
        client_cert: (( property_overrides.bbs.client_cert ))
        client_key: (( property_overrides.bbs.client_key ))
        require_ssl: (( property_overrides.bbs.require_ssl || true ))
        client_session_cache_size: (( property_overrides.bbs.client_session_cache_size || nil ))
        max_idle_conns_per_host: (( property_overrides.bbs.max_idle_conns_per_host || nil ))
      locket:
        api_location: (( sql_lock_overrides.locket.api_location || nil ))
      skip_consul_lock: (( property_overrides.auctioneer.skip_consul_lock || nil))
      rep:
        ca_cert: (( property_overrides.rep.ca_cert || nil ))
        client_cert: (( property_overrides.rep.client_cert || nil ))
        client_key: (( property_overrides.rep.client_key || nil ))
        require_tls: (( property_overrides.rep.require_tls || nil ))
        client_session_cache_size: (( property_overrides.rep.client_session_cache_size || nil ))
      cell_state_timeout: (( property_overrides.auctioneer.cell_state_timeout || nil ))
      starting_container_weight: (( property_overrides.auctioneer.starting_container_weight || nil ))
      dropsonde_port: (( config_from_cf.metron_agent.dropsonde_incoming_port ))
      log_level: (( property_overrides.auctioneer.log_level || "debug" ))
    cfdot:
      bbs:
        use_ssl: (( property_overrides.bbs.require_ssl || nil ))
        ca_cert: (( property_overrides.bbs.ca_cert ))
        client_cert: (( property_overrides.bbs.client_cert ))
        client_key: (( property_overrides.bbs.client_key ))
    bbs:
      enable_access_log: (( property_overrides.bbs.enable_access_log || nil ))
      active_key_label: (( property_overrides.bbs.active_key_label || nil ))
      encryption_keys: (( property_overrides.bbs.encryption_keys || nil ))
      require_ssl: (( property_overrides.bbs.require_ssl || nil ))
      ca_cert: (( property_overrides.bbs.ca_cert ))
      server_cert: (( property_overrides.bbs.server_cert ))
      server_key: (( property_overrides.bbs.server_key ))
      dropsonde_port: (( config_from_cf.metron_agent.dropsonde_incoming_port ))
      auctioneer:
        api_url: (( property_overrides.bbs.auctioneer.api_url || "http://auctioneer.service.cf.internal:9016" ))
        api_location: (( property_overrides.bbs.auctioneer.api_location || nil ))
        ca_cert: (( property_overrides.bbs.auctioneer.ca_cert || nil ))
        client_cert: (( property_overrides.bbs.auctioneer.client_cert || nil ))
        client_key: (( property_overrides.bbs.auctioneer.client_key || nil ))
        require_tls: (( property_overrides.bbs.auctioneer.require_tls || nil ))
      etcd: (( bbs_overrides.bbs_properties.etcd ))
      sql:
        db_connection_string: (( sql_overrides.bbs.db_connection_string || nil ))
        db_driver: (( sql_overrides.bbs.db_driver || nil ))
        db_host: (( sql_overrides.bbs.db_host || nil ))
        db_port: (( sql_overrides.bbs.db_port || nil ))
        db_username: (( sql_overrides.bbs.db_username || nil ))
        db_password: (( sql_overrides.bbs.db_password || nil ))
        db_schema: (( sql_overrides.bbs.db_schema || nil ))
        max_open_connections: (( sql_overrides.bbs.max_open_connections || nil ))
        max_idle_connections: (( sql_overrides.bbs.max_idle_connections || nil ))
        require_ssl: (( sql_overrides.bbs.require_ssl || nil ))
        ca_cert: (( sql_overrides.bbs.ca_cert || nil ))
      log_level: (( property_overrides.bbs.log_level || nil ))
      convergence:
        repeat_interval_in_seconds: (( property_overrides.bbs.convergence.repeat_interval_in_seconds || nil ))
        kick_task_duration_in_seconds: (( property_overrides.bbs.convergence.kick_task_duration_in_seconds || nil ))
        expire_completed_task_duration_in_seconds: (( property_overrides.bbs.convergence.expire_completed_task_duration_in_seconds || nil ))
        expire_pending_task_duration_in_seconds: (( property_overrides.bbs.convergence.expire_pending_task_duration_in_seconds || nil ))
      rep:
        ca_cert: (( property_overrides.rep.ca_cert || nil ))
        client_cert: (( property_overrides.rep.client_cert || nil  ))
        client_key: (( property_overrides.rep.client_key || nil ))
        require_tls: (( property_overrides.rep.require_tls || nil ))
        client_session_cache_size: (( property_overrides.rep.client_session_cache_size || nil ))
      locket:
        api_location: (( sql_lock_overrides.locket.api_location || nil ))
      skip_consul_lock: (( property_overrides.bbs.skip_consul_lock || nil))
      detect_consul_cell_registrations: (( property_overrides.bbs.detect_consul_cell_registrations || nil ))
    locket:
      sql:
        ca_cert: (( sql_overrides.locket.ca_cert || nil ))
        require_ssl: (( sql_overrides.locket.require_ssl || nil ))
        db_driver: (( sql_overrides.locket.db_driver || nil ))
        db_host: (( sql_overrides.locket.db_host || nil ))
        db_port: (( sql_overrides.locket.db_port || nil ))
        db_username: (( sql_overrides.locket.db_username || nil ))
        db_password: (( sql_overrides.locket.db_password || nil ))
        db_schema: (( sql_overrides.locket.db_schema || nil ))
    executor:
      disk_capacity_mb: (( property_overrides.executor.disk_capacity_mb || 32768 ))
      max_cache_size_in_bytes: (( property_overrides.executor.max_cache_size_in_bytes || nil ))
      memory_capacity_mb: (( property_overrides.executor.memory_capacity_mb || 8192 ))
      post_setup_hook: (( property_overrides.executor.post_setup_hook || nil ))
      post_setup_user: (( property_overrides.executor.post_setup_user || nil ))
      garden:
        network: (( property_overrides.executor.garden.network || nil ))
        address: (( property_overrides.executor.garden.address || nil ))
      garden_healthcheck:
        interval: (( property_overrides.executor.garden_healthcheck.interval || nil ))
        timeout: (( property_overrides.executor.garden_healthcheck.timeout || nil ))
        command_retry_pause: (( property_overrides.executor.garden_healthcheck.command_retry_pause || nil ))
        process:
          path: (( property_overrides.executor.garden_healthcheck.process.path || nil ))
          user: (( property_overrides.executor.garden_healthcheck.process.user || nil ))
          dir: (( property_overrides.executor.garden_healthcheck.process.dir || nil ))
          args: (( property_overrides.executor.garden_healthcheck.process.args || nil ))
          env: (( property_overrides.executor.garden_healthcheck.process.env || nil ))
      ca_certs_for_downloads: (( property_overrides.executor.ca_certs_for_downloads || nil ))
      log_level: (( property_overrides.executor.log_level || nil ))
      container_metrics_report_interval: (( property_overrides.executor.container_metrics_report_interval || nil ))
      instance_identity_ca_cert: (( property_overrides.executor.instance_identity_ca_cert || nil ))
      instance_identity_key: (( property_overrides.executor.instance_identity_key || nil ))
    file_server:
      dropsonde_port: (( config_from_cf.metron_agent.dropsonde_incoming_port ))
      log_level: (( property_overrides.file_server.log_level || "debug" ))
    rep:
      preloaded_rootfses: (( grootfs_overrides.rep.preloaded_rootfses ))
      #preloaded_rootfses: (( property_overrides.diego.rep.preloaded_rootfses || ["cflinuxfs2:/var/vcap/packages/cflinuxfs2/rootfs"] ))
      dropsonde_port: (( config_from_cf.metron_agent.dropsonde_incoming_port ))
      bbs:
        api_location: (( property_overrides.bbs.api_location || "bbs.service.cf.internal:8889" ))
        ca_cert: (( property_overrides.bbs.ca_cert ))
        client_cert: (( property_overrides.bbs.client_cert ))
        client_key: (( property_overrides.bbs.client_key ))
        require_ssl: (( property_overrides.bbs.require_ssl || nil ))
        client_session_cache_size: (( property_overrides.bbs.client_session_cache_size || nil ))
        max_idle_conns_per_host: (( property_overrides.bbs.max_idle_conns_per_host || nil ))
      evacuation_timeout_in_seconds: (( property_overrides.rep.evacuation_timeout_in_seconds || nil ))
      trusted_certs: (( property_overrides.rep.trusted_certs || nil ))
      log_level: (( property_overrides.rep.log_level || nil ))
      require_tls: (( property_overrides.rep.require_tls || nil ))
      enable_legacy_api_endpoints: (( property_overrides.rep.enable_legacy_api_endpoints || nil ))
      listen_addr_admin: (( property_overrides.rep.listen_addr_admin || nil ))
      ca_cert: (( property_overrides.rep.ca_cert || nil ))
      server_cert: (( property_overrides.rep.server_cert || nil ))
      server_key: (( property_overrides.rep.server_key || nil ))
      locket:
        api_location: (( sql_lock_overrides.locket.api_location || nil ))
    route_emitter:
      dropsonde_port: (( config_from_cf.metron_agent.dropsonde_incoming_port ))
      bbs:
        api_location: (( property_overrides.bbs.api_location || "bbs.service.cf.internal:8889" ))
        ca_cert: (( property_overrides.bbs.ca_cert ))
        client_cert: (( property_overrides.bbs.client_cert ))
        client_key: (( property_overrides.bbs.client_key ))
        require_ssl: (( property_overrides.bbs.require_ssl || nil ))
        client_session_cache_size: (( property_overrides.bbs.client_session_cache_size || nil ))
        max_idle_conns_per_host: (( property_overrides.bbs.max_idle_conns_per_host || nil ))
      nats:
        machines: (( config_from_cf.nats.machines ))
        user: (( config_from_cf.nats.user ))
        password: (( config_from_cf.nats.password ))
        port: (( config_from_cf.nats.port ))
      log_level: (( property_overrides.route_emitter.log_level || nil ))
    ssh_proxy:
      dropsonde_port: (( config_from_cf.metron_agent.dropsonde_incoming_port ))
      bbs:
        api_location: (( property_overrides.bbs.api_location || "bbs.service.cf.internal:8889" ))
        ca_cert: (( property_overrides.bbs.ca_cert ))
        client_cert: (( property_overrides.bbs.client_cert ))
        client_key: (( property_overrides.bbs.client_key ))
        require_ssl: (( property_overrides.bbs.require_ssl || nil ))
        client_session_cache_size: (( property_overrides.bbs.client_session_cache_size || nil ))
        max_idle_conns_per_host: (( property_overrides.bbs.max_idle_conns_per_host || nil ))
      uaa:
        url: (( property_overrides.ssh_proxy.uaa.url || nil ))
        port: (( config_from_cf.uaa.tls_port ))
        ca_cert: (( config_from_cf.uaa.ca_cert ))
      host_key: (( property_overrides.ssh_proxy.host_key || "" ))
      enable_cf_auth: (( property_overrides.ssh_proxy.enable_cf_auth || true ))
      enable_diego_auth: (( property_overrides.ssh_proxy.enable_diego_auth || false ))
      uaa_secret: (( config_from_cf.uaa.ssh_proxy_client_secret || "ssh-proxy-secret" ))
      diego_credentials: (( property_overrides.ssh_proxy.diego_credentials || nil ))

  # -- Proerties below are used by jobs from the capi-release --
  capi:
    cc_uploader:
      dropsonde_port: (( config_from_cf.metron_agent.dropsonde_incoming_port ))
      log_level: (( property_overrides.cc_uploader.log_level || nil ))
      cc:
        ca_cert: (( property_overrides.cc_uploader.cc.ca_cert ))
        client_cert: (( property_overrides.cc_uploader.cc.client_cert ))
        client_key: (( property_overrides.cc_uploader.cc.client_key ))
      mutual_tls:
        ca_cert: (( property_overrides.cc_uploader.ca_cert ))
        server_cert: (( property_overrides.cc_uploader.server_cert ))
        server_key: (( property_overrides.cc_uploader.server_key ))
    nsync:
      diego_privileged_containers: (( property_overrides.nsync.diego_privileged_containers || nil ))
      dropsonde_port: (( config_from_cf.metron_agent.dropsonde_incoming_port ))
      bbs:
        api_location: (( property_overrides.bbs.api_location || "bbs.service.cf.internal:8889" ))
        ca_cert: (( property_overrides.bbs.ca_cert ))
        client_cert: (( property_overrides.bbs.client_cert ))
        client_key: (( property_overrides.bbs.client_key ))
        require_ssl: (( property_overrides.bbs.require_ssl || nil ))
        client_session_cache_size: (( property_overrides.bbs.client_session_cache_size || nil ))
        max_idle_conns_per_host: (( property_overrides.bbs.max_idle_conns_per_host || nil ))
      cc:
        base_url: (( config_from_cf.cc.srv_api_uri ))
        basic_auth_username: (( config_from_cf.cc.internal_api_user ))
        basic_auth_password: (( config_from_cf.cc.internal_api_password ))
      log_level: (( property_overrides.nsync.log_level || nil ))
    stager:
      diego_privileged_containers: (( property_overrides.stager.diego_privileged_containers || nil ))
      dropsonde_port: (( config_from_cf.metron_agent.dropsonde_incoming_port ))
      cc:
        basic_auth_username: (( config_from_cf.cc.internal_api_user ))
        basic_auth_password: (( config_from_cf.cc.internal_api_password ))
      bbs:
        api_location: (( property_overrides.bbs.api_location || "bbs.service.cf.internal:8889" ))
        ca_cert: (( property_overrides.bbs.ca_cert ))
        client_cert: (( property_overrides.bbs.client_cert ))
        client_key: (( property_overrides.bbs.client_key ))
        require_ssl: (( property_overrides.bbs.require_ssl || nil ))
        client_session_cache_size: (( property_overrides.bbs.client_session_cache_size || nil ))
        max_idle_conns_per_host: (( property_overrides.bbs.max_idle_conns_per_host || nil ))
      log_level: (( property_overrides.stager.log_level || nil ))
      insecure_docker_registry_list: (( property_overrides.stager.insecure_docker_registry_list || nil ))
    tps:
      dropsonde_port: (( config_from_cf.metron_agent.dropsonde_incoming_port ))
      listener_enabled: (( bridge_overrides.listener_enabled ))
      cc:
        basic_auth_username: (( config_from_cf.cc.internal_api_user ))
        basic_auth_password: (( config_from_cf.cc.internal_api_password ))
        ca_cert: (( property_overrides.tps.cc.ca_cert ))
        client_cert: (( property_overrides.tps.cc.client_cert ))
        client_key: (( property_overrides.tps.cc.client_key ))
      bbs:
        api_location: (( property_overrides.bbs.api_location || "bbs.service.cf.internal:8889" ))
        ca_cert: (( property_overrides.bbs.ca_cert ))
        client_cert: (( property_overrides.bbs.client_cert ))
        client_key: (( property_overrides.bbs.client_key ))
        require_ssl: (( property_overrides.bbs.require_ssl || true ))
        client_session_cache_size: (( property_overrides.bbs.client_session_cache_size || nil ))
        max_idle_conns_per_host: (( property_overrides.bbs.max_idle_conns_per_host || nil ))
      watcher:
        locket:
          api_location: (( sql_lock_overrides.locket.api_location || nil ))
        skip_consul_lock: (( property_overrides.tps.watcher.skip_consul_lock || nil))
      log_level: (( property_overrides.tps.log_level || nil ))


  # -- Properties below are used by jobs from garden-runc-release --
  garden:
    allow_host_access: (( property_overrides.garden.allow_host_access || nil ))
    allow_networks: (( property_overrides.garden.allow_networks || nil ))
    apparmor_profile: (( property_overrides.garden.apparmor_profile || nil ))
    debug_listen_address: (( property_overrides.garden.debug_listen_address || "127.0.0.1:17005" ))
    default_container_grace_time: (( property_overrides.garden.default_container_grace_time || 0 ))
    deny_networks: (( property_overrides.garden.deny_networks || ["0.0.0.0/0"] ))
    destroy_containers_on_start: (( property_overrides.garden.destroy_containers_on_start || true ))
    disk_quota_enabled: (( property_overrides.garden.disk_quota_enabled || nil ))
    dns_servers: (( property_overrides.garden.dns_servers || nil ))
    graph_cleanup_threshold_in_mb: (( property_overrides.garden.graph_cleanup_threshold_in_mb || 0 ))
    insecure_docker_registry_list: (( property_overrides.garden.insecure_docker_registry_list || nil ))
    listen_address: (( property_overrides.garden.listen_address || nil ))
    listen_network: (( property_overrides.garden.listen_network || nil ))
    log_level: (( property_overrides.garden.log_level || nil ))
    network_mtu: (( property_overrides.garden.mtu || nil ))
    max_containers: (( property_overrides.garden.max_containers || nil ))
    network_pool: (( property_overrides.garden.network_pool || nil ))
    port_pool:
      size: (( property_overrides.garden.port_pool.size || nil ))
    persistent_image_list: (( property_overrides.garden.persistent_image_list || ["/var/vcap/packages/cflinuxfs2/rootfs"] ))
    network_plugin: (( cf_networking_overrides.garden_properties.network_plugin || nil ))
    network_plugin_extra_args: (( cf_networking_overrides.garden_properties.network_plugin_extra_args || nil ))
    image_plugin: (( grootfs_overrides.garden.image_plugin || nil ))
    image_plugin_extra_args: (( grootfs_overrides.garden.image_plugin_extra_args || nil ))
    privileged_image_plugin: (( grootfs_overrides.garden.privileged_image_plugin || nil ))
    privileged_image_plugin_extra_args: (( grootfs_overrides.garden.privileged_image_plugin_extra_args || nil ))
    cleanup_process_dirs_on_wait: true
  cadvisor: (( paasta_overrides.cadvisor_properties || nil ))
  
    # -- Properties below are used by jobs from grootfs-release --
  grootfs: (( grootfs_overrides.grootfs || nil ))

  register_direct_instance_routes: (( property_overrides.register_direct_instance_routes || nil))
  
# The keys below should not be included in the final stub
config_from_cf: (( merge ))
iaas_settings: (( merge ))
instance_count_overrides: (( merge || nil ))
property_overrides: (( merge ))
sql_overrides: (( merge  || nil ))
sql_lock_overrides:
  templates: (( merge || [] ))
  locket: (( merge || nil ))

bridge_overrides:
  job_release: (( config_from_cf.cf_release.name || "cf" ))
  releases: (( merge || [] ))
  listener_enabled: (( merge || nil ))

# This is weird. We need to merge the consul properties for the bbs in the
# following order:
#   - cf_networking_overrides.bbs_consul_properties
#   - bbs_overrides.job_properties.consul
#   - base_etcd_properties.consul.
# Due to limitations in spiff, you cannot currently do: (( a || b || c )) in
# this manner. Thus this is a cosmetic rename so that the bbs job definitions
# above are not referncing `cf_networking_overrides.bbs_consul_properties`.
base_bbs_consul_properties: (( cf_networking_overrides.bbs_consul_properties ))

bbs_overrides:
  job_properties:
    consul: {}
  job_templates:
  - name: consul_agent
    consumes:
      consul_common: nil
      consul_server: nil
      consul_client: nil
    release: (( config_from_cf.cf_release.name || "cf" ))
  - name: bbs
    release: (( release_versions.diego.name || "diego" ))
  - name: metron_agent
    release: (( config_from_cf.cf_release.name || "cf" ))
  - name: cfdot
    release: (( release_versions.diego.name || "diego" ))
  etcd_properties: {}
  bbs_properties:
    etcd:
      machines: []
      ca_cert: ""
      client_cert: ""
      client_key: ""
  releases: []


base_etcd_properties:
  releases:
  - name: etcd
    version: (( release_versions.etcd.version ))
  consul:
    agent:
      services:
        etcd: {}
  properties:
    machines: ["etcd.service.cf.internal"]
    advertise_urls_dns_suffix: "etcd.service.cf.internal"
    cluster:
      - name: "database_z1"
        instances: (( instance_count_overrides.database_z1.instances || 1 ))
      - name: "database_z2"
        instances: (( instance_count_overrides.database_z2.instances || 1 ))
      - name: "database_z3"
        instances: (( instance_count_overrides.database_z3.instances || 1 ))
      - name: "colocated_z1"
        instances: (( instance_count_overrides.colocated_z1.instances || 0 ))
      - name: "colocated_z2"
        instances: (( instance_count_overrides.colocated_z2.instances || 0 ))
      - name: "colocated_z2"
        instances: (( instance_count_overrides.colocated_z2.instances || 0 ))
    require_ssl: (( property_overrides.etcd.require_ssl || nil ))
    ca_cert: (( property_overrides.etcd.ca_cert || nil ))
    server_cert: (( property_overrides.etcd.server_cert || nil ))
    server_key: (( property_overrides.etcd.server_key || nil ))
    client_cert: (( property_overrides.etcd.client_cert || nil ))
    client_key: (( property_overrides.etcd.client_key || nil ))
    peer_require_ssl: (( property_overrides.etcd.peer_require_ssl || nil ))
    peer_ca_cert: (( property_overrides.etcd.peer_ca_cert || nil ))
    peer_cert: (( property_overrides.etcd.peer_cert || nil ))
    peer_key: (( property_overrides.etcd.peer_key || nil ))
    heartbeat_interval_in_milliseconds: (( property_overrides.etcd.heartbeat_interval_in_milliseconds || nil ))
    election_timeout_in_milliseconds: (( property_overrides.etcd.election_timeout_in_milliseconds || nil ))

garden_overrides:
  job_release: (( release_versions.garden-runc.name || "garden-runc" ))
  release:
    name: (( release_versions.garden-runc.name || "garden-runc" ))
    version: (( release_versions.garden-runc.version || "latest" ))
    
grootfs_overrides:
  grootfs:
    graph_cleanup_threshold_in_mb: (( property_overrides.garden.graph_cleanup_threshold_in_mb || 0 ))
    insecure_docker_registry_list: (( property_overrides.garden.insecure_docker_registry_list || nil ))
    persistent_image_list: (( property_overrides.garden.persistent_image_list || ["/var/vcap/packages/cflinuxfs2/rootfs.tar"] ))
  
  garden:
    image_plugin: (( merge || nil ))
    image_plugin_extra_args: (( merge || nil ))
    privileged_image_plugin: (( merge || nil ))
    privileged_image_plugin_extra_args: (( merge || nil ))
    graph_cleanup_threshold_in_mb: (( merge || nil ))
    insecure_docker_registry_list: (( merge || nil ))
    persistent_image_list: (( merge || nil ))
  rep:
    preloaded_rootfses: (( property_overrides.diego.rep.preloaded_rootfses || ["cflinuxfs2:/var/vcap/packages/cflinuxfs2/rootfs.tar"] ))
  releases: (( merge || [] ))
  templates: (( merge || [] ))


empty_hash: {}

volman_overrides:
  releases: (( merge || [] ))
  driver_templates: (( merge || [] ))

cf_networking_overrides:
  releases: (( merge || [] ))
  driver_templates: (( merge || [] ))
  properties: (( merge || [] ))
  garden_properties: (( merge || [] ))
  jobs: (( merge || [] ))
  bbs_templates: (( merge || [] ))
  bbs_templates_z1: (( merge || cf_networking_overrides.bbs_templates ))
  bbs_templates_z2: (( merge || cf_networking_overrides.bbs_templates ))
  bbs_templates_z3: (( merge || cf_networking_overrides.bbs_templates ))
  bbs_consul_properties: (( merge || bbs_overrides.job_properties.consul ))


route_emitter_overrides:
  templates: (( merge || [] ))
  local_mode_enabled: false

paasta_overrides:
  templates: (( merge || [] ))
  cadvisor_properties: (( merge || nil ))

base_releases:
  - name: (( release_versions.diego.name || "diego" ))
    version: (( release_versions.diego.version || "latest" ))
  - name: (( release_versions.cflinuxfs2.name || "cflinuxfs2" ))
    version: (( release_versions.cflinuxfs2.version || "latest" ))
release_versions: (( merge || nil ))
default_bridge_jobs:
  - name: consul_agent
    consumes:
      consul_common: nil
      consul_server: nil
      consul_client: nil
    release: (( config_from_cf.cf_release.name || "cf" ))
  - name: stager
    release: (( bridge_overrides.job_release || "cf" ))
  - name: nsync
    release: (( bridge_overrides.job_release || "cf" ))
  - name: tps
    release: (( bridge_overrides.job_release || "cf" ))
  - name: cc_uploader
    release: (( bridge_overrides.job_release || "cf" ))
  - name: metron_agent
    release: (( config_from_cf.cf_release.name || "cf" ))

base_job_templates:
  access:
    - name: consul_agent
      consumes:
        consul_common: nil
        consul_server: nil
        consul_client: nil
      release: (( config_from_cf.cf_release.name || "cf" ))
    - name: ssh_proxy
      release: (( release_versions.diego.name || "diego" ))
    - name: metron_agent
      release: (( config_from_cf.cf_release.name || "cf" ))
    - name: file_server
      release: (( release_versions.diego.name || "diego" ))
    - name: cfdot
      release: (( release_versions.diego.name || "diego" ))
  brain:
    - name: consul_agent
      consumes:
        consul_common: nil
        consul_server: nil
        consul_client: nil
      release: (( config_from_cf.cf_release.name || "cf" ))
    - name: auctioneer
      release: (( release_versions.diego.name || "diego" ))
    - name: metron_agent
      release: (( config_from_cf.cf_release.name || "cf" ))
    - name: cfdot
      release: (( release_versions.diego.name || "diego" ))

  cc_bridge: (( merge || default_bridge_jobs ))

  cell:
    - name: consul_agent
      consumes:
        consul_common: nil
        consul_server: nil
        consul_client: nil
      release: (( config_from_cf.cf_release.name || "cf" ))
    - name: rep
      release: (( release_versions.diego.name || "diego" ))
    - name: garden
      release: (( garden_overrides.job_release || "garden-runc" ))
    - name: cflinuxfs2-rootfs-setup
      release: (( release_versions.cflinuxfs2.name || "cflinuxfs2" ))
    - name: metron_agent
      release: (( config_from_cf.cf_release.name || "cf" ))
    - name: cfdot
      release: (( release_versions.diego.name || "diego" ))

  database:
    - name: consul_agent
      consumes:
        consul_common: nil
        consul_server: nil
        consul_client: nil
      release: (( config_from_cf.cf_release.name || "cf" ))
    - name: bbs
      release: (( release_versions.diego.name || "diego" ))
    - name: metron_agent
      release: (( config_from_cf.cf_release.name || "cf" ))
    - name: cfdot
      release: (( release_versions.diego.name || "diego" ))

  route_emitter:
    - name: consul_agent
      consumes:
        consul_common: nil
        consul_server: nil
        consul_client: nil
      release: (( config_from_cf.cf_release.name || "cf" ))
    - name: route_emitter
      release: (( release_versions.diego.name || "diego" ))
    - name: metron_agent
      release: (( config_from_cf.cf_release.name || "cf" ))
    - name: cfdot
      release: (( release_versions.diego.name || "diego" ))
  colocated:
    - name: rep
      release: (( release_versions.diego.name || "diego" ))
    - name: auctioneer
      release: (( release_versions.diego.name || "diego" ))
    - name: cc_uploader
      release: (( config_from_cf.cf_release.name || "cf" ))
    - name: file_server
      release: (( release_versions.diego.name || "diego" ))
    - name: garden
      release: (( garden_overrides.job_release || "garden-runc" ))
    - name: nsync
      release: (( config_from_cf.cf_release.name || "cf" ))
    - name: cflinuxfs2-rootfs-setup
      release: (( release_versions.cflinuxfs2.name || "cflinuxfs2" ))
    - name: route_emitter
      release: (( release_versions.diego.name || "diego" ))
    - name: ssh_proxy
      release: (( release_versions.diego.name || "diego" ))
    - name: stager
      release: (( config_from_cf.cf_release.name || "cf" ))
    - name: tps
      release: (( config_from_cf.cf_release.name || "cf" ))

resource_pool_overrides: (( merge || nil ))