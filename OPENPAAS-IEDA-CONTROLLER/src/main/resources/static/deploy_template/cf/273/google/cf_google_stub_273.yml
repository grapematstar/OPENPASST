# The following line helps maintain current documentation at http://docs.cloudfoundry.org.
# code_snippet cf-stub-openstack start
---
director_uuid: (( meta.director-uuid ))

meta: ~
cf-certs: ~

resource_pool_overrides:
  small_instance_type: (( meta.small-instance-type || "n1-standard-1" ))
  medium_instance_type: (( meta.medium-instance-type || "n1-standard-2" ))
  large_instance_type: (( meta.large-instance-type || "n1-standard-3" ))
  zone: (( meta.zone ))

base_security_group:
  rules:
  - destination: 10.244.0.0-10.254.0.0
    protocol: all

networks:
  - name: floating
    type: vip
    
  - name: cf1
    type: manual
    subnets:
    - range: (( meta.network-0-range ))
      gateway: (( meta.network-0-gateway ))
      reserved: (( meta.network-0-reserved ))
      dns: (( meta.network-0-dns ))
      static: (( meta.network-0-static ))
      cloud_properties:
        ephemeral_external_ip: true
        network_name: (( meta.network-0-network-name ))
        subnetwork_name: (( meta.network-0-subnet-name ))
        tags: (( meta.network-0-security-groups ))
  - name: cf2
    type: manual
    subnets: (( merge || networks.cf1.subnets ))    # cf2 unused by default with the OpenStack template
                                                    # but the general upstream templates require this
                                                    # to be a semi-valid value, so just copy cf1
properties:
  domain: (( meta.system-domain ))
  system_domain: (( meta.system-domain ))
  system_domain_organization: (( meta.system-domain-organization ))
  app_domains:
  - (( meta.system-domain ))

  ssl:
    skip_cert_verify: (( meta.ssl-skip-cert-verify || true ))

  cc:
    staging_upload_user: (( meta.staging-upload-user || "upload-user" ))
    staging_upload_password: (( meta.staging-upload-password || "upload-password" ))
    bulk_api_password: (( meta.bulk-api-password || "bulk-password" ))
    db_encryption_key: (( meta.bulk-api-password || "db-encryption-key" ))
    uaa_skip_ssl_validation: true
    tls_port: (( merge || 9023 ))
    mutual_tls:
      ca_cert: (( cf-certs.cc-mutual-tls-ca-cert ))
      public_cert: (( cf-certs.cc-mutual-tls-public_cert ))
      private_key: (( cf-certs.cc-mutual-tls-private_key ))

  blobstore:
    admin_users:
      - username: (( meta.blobstore-username || "blobstore-username" ))
        password: (( meta.blobstore-password || "blobstore-password" ))
    secure_link:
      secret: (( meta.blobstore-secret || "blobstore-secret" ))
    tls:
      cert: (( cf-certs.blobstore-server-cert ))
      private_key: (( cf-certs.blobstore-server-key ))
      ca_cert: (( cf-certs.blobstore-ca-cert ))
  consul:
    encrypt_keys: (( cf-certs.consul-encrypt-keys ))
    ca_cert: (( cf-certs.consul-ca-cert ))
    server_cert: (( cf-certs.consul-server-cert ))
    server_key: (( cf-certs.consul-server-key ))
    agent_cert: (( cf-certs.consul-agent-cert ))
    agent_key: (( cf-certs.consul-agent-key ))
 
  etcd:
    require_ssl: (( meta.etcd-require-ssl || false ))
    ca_cert: (( cf-certs.etcd-ca-cert ))
    server_cert: (( cf-certs.etcd-server-cert ))
    server_key: (( cf-certs.etcd-server-key ))
    client_cert: (( cf-certs.etcd-client-cert ))
    client_key: (( cf-certs.etcd-client-key ))
    peer_ca_cert: (( cf-certs.peer-ca-cert ))
    peer_cert: (( cf-certs.peer-cert ))
    peer_key: (( cf-certs.peer-key ))
  loggregator:
    tls:
      ca_cert: (( cf-certs.loggregator-ca-cert ))
      doppler:
        cert: (( cf-certs.doppler-cert ))
        key: (( cf-certs.doppler-key ))
      trafficcontroller:
        cert: (( cf-certs.trafficcontroller-cert ))
        key: (( cf-certs.trafficcontroller-key ))
      cc_trafficcontroller:
        cert: (( cf-certs.cc-trafficcontroller-cert ))
        key: (( cf-certs.cc-trafficcontroller-key ))
      metron:
        cert: (( cf-certs.metron-cert ))
        key: (( cf-certs.metron-key ))
      syslogdrainbinder:
        cert: (( cf-certs.syslogdrainbinder-cert ))
        key: (( cf-certs.syslogdrainbinder-key ))
      statsd_injector:
        cert: (( cf-certs.statsd-injector-cert ))
        key: (( cf-certs.statsd-injector-key ))
  loggregator_endpoint:
    shared_secret: (( meta.loggregator-secret || "loggregator-secret" ))
  login:
    protocol: (( meta.login-protocol || nil ))
    saml:
      serviceProviderCertificate: (( cf-certs.uaa-saml-cert ))
      serviceProviderKey: (( cf-certs.uaa-saml-key ))
  nats:
    user: (( meta.nats-user || "nats" ))
    password: (( meta.nats-password || "nats" ))
  router:
    status:
      user: (( meta.router-user || "router" ))
      password: (( meta.router-password || "router" ))
  uaa:
    ca_cert: (( cf-certs.uaa-cert ))
    admin:
      client_secret: (( meta.admin-secret || "admin-secret" ))
    cc:
      client_secret: (( meta.cc-secret || "cc-secret" ))
    clients:
      <<: (( merge || nil ))
      cc_routing:
        secret: (( meta.cc-routing-secret || "cc-routing-secret" ))
      cloud_controller_username_lookup:
        secret: (( meta.cloud-controller-username-lookup-secret || "cloud-controller-username-lookup-secret" ))
      doppler:
        secret: (( meta.doppler-secret || "doppler-secret" ))
      gorouter:
        secret: (( meta.gorouter-secret || "gorouter-secret" ))
      tcp_emitter:
        secret: (( meta.tcp-emitter-secret || "tcp-emitter-secret" ))
      tcp_router:
        secret: (( meta.tcp-router-secret || "tcp-router-secret" ))
      login:
        secret: (( meta.login-secret || "login-secret" ))
      notifications:
        secret: (( meta.notification-secret || "notification-secret" ))
      cc-service-dashboards:
        secret: (( meta.cc-service-dashboards || "cc-service-dashboards-secret" ))
        
    jwt:
      verification_key: (( cf-certs.jwt-verification-key ))
      signing_key: (( cf-certs.jwt-signing-key ))
    scim:
      users:
      - name: (( meta.admin-name || "admin" ))
        password: (( meta.admin-password ))
        groups:
        - scim.write
        - scim.read
        - openid
        - cloud_controller.admin
        - doppler.firehose
        - clients.read
        - clients.write
        - routing.router_groups.read
        - routing.router_groups.write
    sslCertificate: (( cf-certs.uaa-ssl-cert ))
    sslPrivateKey: (( cf-certs.uaa-ssl-key ))
    
  ccdb:
    roles:
    - name: ccadmin
      password: (( meta.ccadmin-password || "admin" ))
  uaadb:
    roles:
    - name: uaaadmin
      password: (( meta.uaaadmin-password || "admin" ))
  databases:
    roles:
    - name: ccadmin
      password: (( meta.ccadmin-password || "admin" ))
    - name: uaaadmin
      password: (( meta.uaaadmin-password || "admin" ))
    - tag: admin
      name: diego
      password: (( meta.diego-password || "admin" ))

jobs:
  - name: ha_proxy_z1
    instances: (( merge || 1 ))
    networks:
      - name: floating
        static_ips: (( meta.floating_static_ips ))
      - name: cf1
        static_ips: (( static_ips(0) ))
        default:
        - dns
        - gateway
    properties:
      ha_proxy:
        ssl_pem: (( cf-certs.ha-proxy-ssl ))

  - name: api_z1
    templates:
      - name: consul_agent
        release: (( meta.cf_release.name || "cf" ))
        consumes: {consul_client: nil, consul_server: nil, consul_common: nil}
      - name: java-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: go-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: binary-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: nodejs-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: ruby-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: php-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: python-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: staticfile-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: dotnet-core-buildpack
        release: (( meta.cf_release.name || "cf" ))
      - name: cloud_controller_ng
        release: (( meta.cf_release.name || "cf" ))
        consumes: {nats: nil}
      - name: cloud_controller_clock
        release: (( meta.cf_release.name || "cf" ))
        consumes: {nats: nil}
      - name: cloud_controller_worker
        release: (( meta.cf_release.name || "cf" ))
        consumes: {nats: nil}
      - name: doppler
        release: (( meta.loggregator_release.name || "paasta-loggregator" ))
      - name: syslog_drain_binder
        release: (( meta.loggregator_release.name || "paasta-loggregator" ))
      - name: metron_agent
        release: (( meta.loggregator_release.name || "paasta-loggregator" ))
      - name: statsd_injector
        release: (( meta.cf_release.name || "cf" ))
      - name: route_registrar
        release: (( meta.cf_release.name || "cf" ))
        consumes: {nats: nil}

  - name: api_worker_z1
    instances: 0

security_group_overrides:
  service_networks:
    rules: (( merge || base_security_group.rules ))
  load_balancer:
    rules:
    - destination: (( .jobs.ha_proxy_z1.networks.floating.static_ips.[0] ))
      protocol: all
